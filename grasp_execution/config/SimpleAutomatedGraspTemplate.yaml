# namespace of the robot which is used to load the ArmComponentsNameManager.
# For this node to work, the parameters must
# have been launched with a launch file like in
# $(find arm_components_name_manager)/launch/init_params.launch.
robot_namespace: the-robot-namespace

# Only needed for on-line grasp planning.
# Name of the robot
robot_name: robot-name

# Only needed for on-line grasp planning.
# the names of the URDF joint names in the
# order they are specified in the graspit file (robot_filename).
robot_finger_joint_names:
    - joint1
    - joint2
    - ...

# Pose for the object in the GraspIt! world
# such that it lies on the table (specified in table_filename)
graspit_object_pose:
    x: 0
    y: 0
    z: 0
    qx: 0
    qy: 0
    qz: 0
    qw: 1

# Only needed for simple pre-generated grasp.
# Angles to set all the finger joints to when grasping
open_angles: 0.05

# Only needed for simple pre-generated grasp.
# Angles to set all the finger joints to when un-grasping
close_angles: 0.6

# Tolerance of expected end effector pose for a grasp.
# Grasp considered ineligible if not within this tolerance.
effector_pos_tolerance: 0.02

# Tolerance of expected end effector orientation for a grasp.
# Grasp considered ineligible if not within this tolerance.
effector_ori_tolerance: 0.1

# Tolerance of expected joint angles to be considered at a
# certain state. Used for example to home the arm.
joint_angle_tolerance: 0.05

# the fraction of effector_(pos/ori)_tolerance and
# joint_angle_tolerance which is to be used for
# planning accuracy
plan_tolerance_factor: 0.1

# the span of the arm (from the arm base) when it's
# stretched out at its max
arm_reach_span: 2

# MoveIt! planning group to use for motion planning
planning_group: the-moveit-planning-group-for-arm

# name of the joint states topic
joint_states_topic: /joint_states

# name of the grasp action (topic where it is available)
grasp_action_name: /grasp_execution/grasp

# name of the joint trajectory action (topic where it is available)
joint_trajectory_action_name: /joint_trajectory_action

# name where the object information service is available
request_object_service: /gazebo_objects/get_info

# motion plan service of moveit (to plan a kinematic path)
moveit_motion_plan_service: /plan_kinematic_path

# state validity checking service of moveit
moveit_state_validity_service: /check_state_validity

# MoveIt! service to get planning scene
moveit_get_planning_scene_service: /get_planning_scene

# MoveIt! topic to set planning scene
moveit_set_planning_scene_topic: /planning_scene


